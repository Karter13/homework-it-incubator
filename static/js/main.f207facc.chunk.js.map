{"version":3,"sources":["components/Message/Message.module.css","components/Affairs/Affairs.module.css","components/common/Button/Button.module.css","components/common/Input/Input.module.css","components/common/Checkbox/Checkbox.module.css","components/Image/Image.module.css","components/Greeting/Greeting.module.css","components/Image/Image.tsx","components/Message/Message.tsx","components/common/Button/Button.tsx","components/Affairs/Affairs.tsx","components/common/Input/Input.tsx","components/Greeting/Greeting.tsx","components/common/Checkbox/Checkbox.tsx","components/UniversalComponents/UniversalComponents.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Image","props","className","s","logo","src","url","alt","Message","block","name","myName","content","text","myText","time","realTime","MessageName","MessageText","MessageTime","Button","red","style","button","type","onClick","click","value","Affairs","list","affairs","map","a","key","id","item","mean","priority","removeBusiness","buttonsBox","filterAffairs","Input","error","input","onChange","e","currentTarget","onKeyPress","pressEnter","Greeting","useState","newNameTitle","setNewNameTitle","addNewName","addName","box","event","setError","charCode","names","length","Checkbox","optionInput","radio","checked","checkboxValue","changeValue","UniversalComponents","setCheckboxValue","console","log","App","setAffairs","filter","setFilter","v1","setNames","tasksForAffairs","newAffairs","b","trim","alert","newNames","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f207facc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Message_block__ZNe8s\",\"name\":\"Message_name__bxBTh\",\"content\":\"Message_content__sNnhK\",\"text\":\"Message_text__zeZlF\",\"time\":\"Message_time__yHMS_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Affairs_list__3QveM\",\"item\":\"Affairs_item__UOgBQ\",\"name\":\"Affairs_name__2cVun\",\"buttonsBox\":\"Affairs_buttonsBox__3GU98\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1FwsH\",\"type\":\"Button_type__Sn6ps\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3xVrl\",\"error\":\"Input_error__1ZKOp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionInput\":\"Checkbox_optionInput__3X60D\",\"click-wave\":\"Checkbox_click-wave__3wF9I\",\"radio\":\"Checkbox_radio__kv3YS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Image_logo__3iH-d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Greeting_box__16jO1\"};","import React from 'react';\r\nimport s from './Image.module.css'\r\n\r\ntype ImagePropsType = {\r\n    url: string\r\n}\r\n\r\nexport const Image: React.FC<ImagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.logo}>\r\n            <img src={props.url} alt=\"logo\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessagePropsType = {\r\n    myName: string;\r\n    myText: string;\r\n    realTime: string;\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.block}>\r\n            <MessageName name={props.myName}/>\r\n            <div className={s.content}>\r\n                <MessageText text={props.myText}/>\r\n                <MessageTime time={props.realTime}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype MessageNamePropsType = {\r\n    name: string\r\n}\r\nconst MessageName: React.FC<MessageNamePropsType> = (props) => {\r\n    return (\r\n        <div className={s.name}>\r\n            {props.name}\r\n        </div>\r\n    )\r\n};\r\n\r\ntype MessageTextPropsType = {\r\n    text: string\r\n}\r\nconst MessageText: React.FC<MessageTextPropsType> = (props) => {\r\n    return (\r\n        <div className={s.text}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n};\r\n\r\ntype MessageTimePropsType = {\r\n    time: string\r\n}\r\nconst MessageTime: React.FC<MessageTimePropsType> = (props) => {\r\n    return (\r\n        <div className={s.time}>\r\n            {props.time}\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport style from './Button.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    click: () => void\r\n    value: string\r\n    red?: string\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            <button className={props.red === 'delete' ? `${style.button} ${style.type}` : style.button} onClick={props.click}>{props.value}</button>\r\n        </>\r\n    )\r\n};\r\n","import s from './Affairs.module.css'\r\nimport React from 'react';\r\nimport {Button} from '../common/Button/Button';\r\n\r\n\r\nexport type AffairsType = {\r\n    id: number\r\n    name: string\r\n    priority: string\r\n\r\n}\r\nexport type AffairsPropsType = {\r\n    affairs: Array<AffairsType>\r\n    removeBusiness: (id: number) => void\r\n    filterAffairs: (value: string) => void\r\n}\r\n\r\nexport const Affairs: React.FC<AffairsPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.list}>\r\n            <h3>Affairs</h3>\r\n            {\r\n                props.affairs.map(a => {\r\n                        const deleteItem = () => {\r\n                            props.removeBusiness(a.id)\r\n                        };\r\n                        return (\r\n                            <div key={a.id} className={s.item}>\r\n                                <div className={s.name}>{a.name}</div>\r\n                                <div className={s.mean}>{a.priority}</div>\r\n                                <Button click={deleteItem} value={'Delete'} red={'delete'}/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n            <div className={s.buttonsBox}>\r\n                <Button click={() => props.filterAffairs('all')} value={'All'}/>\r\n                <Button click={() => props.filterAffairs('high')} value={'High'}/>\r\n                <Button click={() => props.filterAffairs('middle')} value={'Middle'}/>\r\n                <Button click={() => props.filterAffairs('low')} value={'Low'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport style from './Input.module.css'\r\n\r\nexport type InputProsType ={\r\n    onChange: (value: string) => void\r\n    value: string\r\n    pressEnter?: (event: KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string | null\r\n\r\n}\r\n\r\nexport const Input: React.FC<InputProsType> = (props) => {\r\n\r\n    const newText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input className={props.error ? `${style.input} ${style.error}` : style.input} type=\"text\"\r\n                   value={props.value}\r\n                   onChange={newText}\r\n                   onKeyPress={props.pressEnter}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n","import React, {KeyboardEvent, useState} from 'react';\r\nimport s from './Greeting.module.css'\r\nimport {Input} from '../common/Input/Input';\r\nimport {Button} from '../common/Button/Button';\r\n\r\nexport type NameType = {\r\n    id: string,\r\n    name: string\r\n}\r\nexport type GreetingPropsType = {\r\n    addName: (name: string) => void\r\n    names: Array<NameType>\r\n    error: string | null\r\n    setError: (value: string | null) => void\r\n}\r\n\r\nexport const Greeting: React.FC<GreetingPropsType> = (props) => {\r\n\r\n    let [newNameTitle, setNewNameTitle] = useState<string>('');\r\n\r\n    const onChangeHandler = (value: string) => {\r\n        setNewNameTitle(value);\r\n    };\r\n    const addNewName = () => {\r\n        props.addName(newNameTitle);\r\n        setNewNameTitle('');\r\n    };\r\n\r\n    const pressEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        props.setError(null);\r\n        if(event.charCode === 13) {\r\n            addNewName();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={s.box}>\r\n            <Input onChange={onChangeHandler}\r\n                   value={newNameTitle}\r\n                   pressEnter={pressEnter}\r\n                   error={props.error}\r\n            />\r\n            <Button value={'Hello'} click={addNewName}/>\r\n            <span>{`количество имен - ${props.names.length}`}</span>\r\n        </div>\r\n    )\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport style from './Checkbox.module.css'\r\n\r\nexport type CheckboxPropsType = {\r\n    checkboxValue: boolean\r\n    changeValue: (value: boolean) => void\r\n}\r\n\r\nexport const Checkbox: React.FC<CheckboxPropsType> = (props) => {\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.checked)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\"\r\n                   className={`${style.optionInput} ${style.radio}`}\r\n                   checked={props.checkboxValue}\r\n                   onChange={changeStatus}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Checkbox} from '../common/Checkbox/Checkbox';\r\nimport {Input} from '../common/Input/Input';\r\nimport {Button} from '../common/Button/Button';\r\n\r\nexport const UniversalComponents = () => {\r\n    let [checkboxValue, setCheckboxValue] = useState<boolean>(true);\r\n    let [error, setError] = useState<string | null>(null);\r\n    const changeValue = (value: boolean) => {\r\n        setCheckboxValue(value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Checkbox checkboxValue={checkboxValue} changeValue={changeValue}/>\r\n            <Input onChange={(value) => {console.log(value)}}\r\n                   value={'INPUT'}\r\n                   error={error}/>\r\n            <Button value={'BUTTON'} click={() => console.log(('click'))}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Image} from './components/Image/Image';\nimport {Message} from './components/Message/Message';\nimport {Affairs, AffairsType} from './components/Affairs/Affairs';\nimport {Greeting, NameType} from './components/Greeting/Greeting';\nimport {v1} from 'uuid';\nimport {UniversalComponents} from './components/UniversalComponents/UniversalComponents';\n\n\nfunction App() {\n    let [affairs, setAffairs] = useState<Array<AffairsType>>(\n        [\n            {id: 1, name: 'Job', priority: 'middle'},\n            {id: 2, name: 'Learning react', priority: 'high'},\n            {id: 3, name: 'Learning English', priority: 'high'},\n            {id: 4, name: 'Learning HTML', priority: 'middle'},\n            {id: 5, name: 'Fishing', priority: 'low'}\n        ]\n    );\n\n    let [filter, setFilter] = useState<string>('all');\n    let [names, setNames] = useState<Array<NameType>>([\n        {id: v1(), name: 'Maikl'}\n    ]);\n    let [error, setError] = useState<string | null>(null);\n\n    function addName(name: string) {\n        if (name && name.trim()) {\n            alert(`Hello ${name}!!`);\n            let newName = {id: v1(), name: name};\n            let newNames = [newName, ...names];\n            setNames(newNames);\n        } else {\n            setError('error');\n            alert('Enter name please!!!')\n        }\n    }\n\n    function removeBusiness(id: number) {\n        let newAffairs = affairs.filter(b => b.id !== id);\n        setAffairs(newAffairs);\n    }\n\n    function filterAffairs(value: string) {\n        setFilter(value);\n    }\n\n    let tasksForAffairs = affairs;\n    if (filter === 'high') {\n        tasksForAffairs = affairs.filter(a => a.priority === 'high')\n    }\n    if (filter === 'middle') {\n        tasksForAffairs = affairs.filter(a => a.priority === 'middle')\n    }\n    if (filter === 'low') {\n        tasksForAffairs = affairs.filter(a => a.priority === 'low')\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"message\">\n                <Image url='https://live.staticflickr.com/1170/5152497387_939ee3015a_b.jpg'/>\n                <Message myName='Michael' myText='I love React!!!' realTime='19.40'/>\n            </div>\n            <Affairs affairs={tasksForAffairs}\n                     removeBusiness={removeBusiness}\n                     filterAffairs={filterAffairs}\n            />\n            <Greeting addName={addName}\n                      names={names}\n                      error={error}\n                      setError={setError}\n            />\n            <UniversalComponents/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}